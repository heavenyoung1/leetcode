class Student:
    def __init__(self, name, surname, gender):
        self.name = name
        self.surname = surname
        self.gender = gender
        self.finished_courses = []
        self.courses_in_progress = []
        self.grades = dict()

    def mean_mark(self):
        all_marks = []
        for i in self.grades.values():
            all_marks.append(i)
        return sum(all_marks) / len(all_marks)

    def __str__(self):
        return(f'''
Имя: {self.name}
Фамилия: {self.surname}
Средняя оценка за домашние задания: {self.mean_mark()}
Курсы в процессе изучения: {self.courses_in_progress}
Завершенные курсы: {self.finished_courses}
               ''')

    def to_rate_lecturer(self, lecturer, course, mark):
        if isinstance(lecturer, Lecturer) and course in lecturer.courses_attached:
            if course in lecturer.rating_lecturer:
                lecturer.rating_lecturer[course].append(mark)
            elif course not in lecturer.rating_lecturer:
                lecturer.rating_lecturer[course] = []
                lecturer.rating_lecturer[course].append(mark)
        else:
            print('Лектор не принкреплён к данному курсу')
        return lecturer.rating_lecturer

    def __lt__(self, other):
        return self.mean_mark() > other.mean_mark()

    def __lt__(self, other):  # <
        my_mean_mark = self.mean_mark(self.grades)
        other_mean_mark = other.mean_mark(other.grades)
        return my_mean_mark < other_mean_mark

    def __le__(self, other):  # <=
        return self.mean_mark(self.grades) <= other.mean_mark(other.grades)

    def __eq__(self, other):  # ==
        return self.mean_mark(self.grades) == other.mean_mark(other.grades)

    def __ne__(self, other):  # !=
        return self.mean_mark(self.grades) != other.mean_mark(other.grades)

    def __gt__(self, other):  # >
        return self.mean_mark(self.grades) > other.mean_mark(other.grades)

    def __ge__(self, other):  # >=
        return self.mean_mark(self.grades) >= other.mean_mark(other.grades)

class Mentor:
    def __init__(self, name, surname):
        self.name = name
        self.surname = surname
        self.courses_attached = []

    def rate_hw(self, student, course, grade):
        if isinstance(student, Student) and course in self.courses_attached and course in student.courses_in_progress:
            if course in student.grades:
                student.grades[course] += grade
                return student.grades
            elif course not in student.grades:
                student.grades[course] = grade
        else:
            return 'Ошибка'

class Lecturer(Mentor):
    def __init__(self, name, surname):
        super().__init__(name, surname)
        self.courses_attached = []
        self.rating_lecturer = dict()
        self.marks_of_lecturer = []

    def mean_mark_lecturer(self):
        '''Средние оценки для класса Лектор'''
        all_marks = []
        for i in self.rating_lecturer.values():
            all_marks += i

        return sum(all_marks)/len(all_marks)



    def __str__(self):
        print(f'''
Имя: {self.name}
Фамилия: {self.surname}
Средняя оценка за лекции: {self.mean_mark_lecturer()}
        ''')

    def __le__(self, other):  # <=
        return self.mean_mark_lecturer(self.rating_lecturer) <= other.mean_mark_lecturer(other.rating_lecturer)

    def __eq__(self, other):  # ==
        return self.mean_mark_lecturer(self.rating_lecturer) == other.mean_mark_lecturer(other.rating_lecturer)

    def __ne__(self, other):  # !=
        return self.mean_mark_lecturer(self.rating_lecturer) != other.mean_mark_lecturer(other.rating_lecturer)

    def __gt__(self, other):  # >
        return self.mean_mark_lecturer(self.rating_lecturer) > other.mean_mark_lecturer(other.rating_lecturer)

    def __ge__(self, other):  # >=
        return self.mean_mark_lecturer(self.rating_lecturer) >= other.mean_mark_lecturer(other.rating_lecturer)

class Reviewer(Mentor):
    def rate_hw(self, student, course, grade):
        grade = int(grade)
        if isinstance(student, Student): # and course in self.courses_attached and course in student.courses_in_progress:
            if course in student.grades:
                student.grades[course] += grade
                return student.grades
            elif course not in student.grades:
                student.grades[course] = grade
                return student.grades
        else:
            return 'Ошибка в классе Reviewer'

    def __str__(self):
        print(f'Имя: {self.name}\nФамилия: {self.surname}')

def mean_mark_student(students, course):
    student_item = [st_1, st_2]
    sum_of_objcect = 0
    dict_of_mark = dict()
    count = 0
    for student in student_item:
        for key, value in student.grades.items():
            if course is key:
                sum_of_objcect += value
                count += 1
    return f'Средняя оценка по курсу {course} - {sum_of_objcect / count}'

def mean_mark_lecturer(lecturer, course):
    lecturer_item = [lecturer_1, lecturer_2]
    sum_of_objcect = 0
    dict_of_mark = dict()
    count = 0
    for lecturer in lecturer_item:
        for key, value in lecturer.rating_lecturer.items():
            for i in lecturer.rating_lecturer.values():
                for i_1 in i:
                    if course is key:
                        sum_of_objcect += i_1
                        count += 1
    return f'Средняя оценка по курсу {course} - {sum_of_objcect / count}'

st_1 = Student('Lisa', 'Simpson', 'female')
st_1.courses_in_progress += ['Python']
st_1.courses_in_progress += ['HTML']
st_1.finished_courses += ['Linear algebra']

st_2 = Student('Bartholomew', 'Simpson', 'male')
st_2.courses_in_progress += ['Python']
st_2.courses_in_progress += ['HTML']
st_1.finished_courses += ['Statictic']

mnt_1 = Mentor('Steve', 'Wozniak')
mnt_2 = Mentor('Larry', 'Page')

lecturer_1 = Lecturer('Elon', 'Musk')
lecturer_2 = Lecturer('Jeff', 'Bezos')

lecturer_1.courses_attached += ['HTML']
lecturer_1.courses_attached += ['Python']

lecturer_2.courses_attached += ['HTML']
lecturer_2.courses_attached += ['Python']

reviewer_1 = Reviewer('Steve', 'Jobs')
reviewer_2 = Reviewer('Sergey', 'Brin')

st_1.to_rate_lecturer(lecturer_1, 'Python', 10)
st_1.to_rate_lecturer(lecturer_2, 'Python', 9)
st_2.to_rate_lecturer(lecturer_1, 'HTML', 8)
st_2.to_rate_lecturer(lecturer_2, 'HTML', 7)

reviewer_1.rate_hw(st_1, 'Python', 10)
reviewer_2.rate_hw(st_1, 'HTML', 9)

reviewer_1.rate_hw(st_2, 'Python', 4)
reviewer_2.rate_hw(st_2, 'HTML', 3)


st_1.mean_mark()
st_2.mean_mark()
print(st_1.__str__())
print(st_2.__str__())
print(lecturer_1.__str__())
print(reviewer_1.__str__())
#lecturer_2.mean_mark_lecturer()
#print(st_1.__lt__(st_2))

print(mean_mark_student(st_1, 'Python'))
print(mean_mark_lecturer(lecturer_2, 'Python'))
