--Выполнил Мефёд Евгений Александрович (2022-09-11)
--Задания выполнены на PostgreSQL в приложении DBeaver 22.0.3
--Для выполнения заданий 1-3 за основу таблиц взят ddl-скрипт для Microsoft SQL Server, приложенный в документе к тестовому заданию,
--отредактированный под PostgreSQL
--Для выполнения задания 4 были созданы таблицы и вставлены рандомные значения 
--для тестирования полученных результатов


--Задание 1 (Времени потрачено: 10 минут)


SELECT т.КодГруппы, 
	   SUM(з.Цена) СуммаЗакупочнаяЦена, 
	   SUM(з.Количество) Остаток
FROM Товар т, Закупка з
WHERE т.КодТовара = з.КодТовара 
GROUP BY т.КодГруппы

--Задание 2 (Времени потрачено: 50 минут)


WITH ПроцентНаценкиПродажи AS (
	SELECT (п1.Цена - з1.Цена)/з1.Цена AS Результат, 
		   з1.КодТовара, 
		   п1.Дата
	FROM Закупка з1
	JOIN Продажа п1
	ON з1.КодТовара = п1.КодТовара),
СуммаПродажи AS (
SELECT п2.Количество * п2.Цена AS Результат, 
	   п2.КодТовара, 
	   п2.Дата
	   FROM Продажа п2),
КодыТоваровНайденные AS (
SELECT пнп.КодТовара, 
	   (SUM(пнп.Результат * сп.Результат))/SUM(сп.Результат) AS КонечныйРезультат, 
	   пнп.Дата
	   FROM СуммаПродажи сп
	   JOIN ПроцентНаценкиПродажи пнп
	   ON пнп.КодТовара = сп.КодТовара
	   GROUP BY пнп.КодТовара, пнп.Дата
       ORDER BY КонечныйРезультат DESC
       LIMIT 3)
SELECT т.КодГруппы 
FROM КодыТоваровНайденные ктн
JOIN Товар т
ON ктн.КодТовара = т.КодТовара
WHERE ктн.Дата BETWEEN '2022-01-01' AND '2022-02-01'
--ДатаС и ДатаПо указываются в явном виде в запросе (строка 38)


--Задание 3 (Времени потрачено 3 часа)


WITH ПрошлыеЗакупки AS (
	SELECT DISTINCT з2.КодТовара, з2.Цена/2 AS Цена, з2.Дата
	FROM Закупка з2
	WHERE з2.Дата NOT IN (
		SELECT max(з.Дата)
		FROM Закупка з
		GROUP BY з.КодТовара
						))
SELECT DISTINCT з3.КодТовара, з3.Цена, з3.Дата
FROM Закупка з3
JOIN ПрошлыеЗакупки пз
ON пз.КодТовара = з3.КодТовара
WHERE пз.Цена > з3.Цена AND пз.Дата != з3.Дата


--Задание 4 (Времени потрачено: 2 часа)


WITH КоличествоОстатков AS (
	SELECT о.КодТовара, 
		   о.ДатаС, 
		   о.Остаток
	FROM Остатки о
	WHERE ДатаС BETWEEN  '2019-01-01' and '2019-02-02'), --ВПИСАТЬ НУЖНЫЕ ДАТЫ ДЛЯ ПОИСКА
		СтоимостьОстатков AS (
		SELECT ко.КодТовара, 
			   ц.Дата, 
			   ц.Цена * ко.Остаток AS ОбщаяСтоимость
		FROM КоличествоОстатков ко
		JOIN Цены ц
		ON ко.ДатаС = ц.Дата
		WHERE ко.КодТовара = ц.КодТовара),
			ВалютаТовара AS (
			SELECT ОбщаяСтоимость, 
				   т.КодВалюты, 
				   со.Дата 
			FROM СтоимостьОстатков со
			LEFT JOIN Товары т
			ON т.КодТовара = со.КодТовара)
SELECT ОбщаяСтоимость, 
	   ОбщаяСтоимость * к.Курс AS СтоимостьвРублях, 
	   вт.Дата
FROM ВалютаТовара вт
JOIN Курсы к
ON к.КодВалюты  = вт.КодВалюты
WHERE к.Дата BETWEEN '2019-01-01' and '2019-02-02' --ВПИСАТЬ НУЖНЫЕ ДАТЫ ДЛЯ КУРСА (ТЕ ЖЕ, ЧТО ВЫШЕ)




----------------------------------------------------------------------------------------------------
--ПРИМЕЧАНИЕ: Запросы на создание таблиц 

create table Курсы (
Дата date not null,
КодВалюты integer unique not null,
Курс integer not null,
primary key(Дата, КодВалюты)
);

create table Товары (
КодТовара integer primary key not null,
Товар varchar(50) not null,
КодВалюты integer not null references Курсы (КодВалюты)
);

create table Цены (
КодТовара integer not null references Товары (КодТовара),
Дата date not null,
Цена integer not null,
primary key (КодТовара, Дата)
);

create table Остатки (
КодТовара integer not null references Товары (КодТовара),
ДатаС date not null,
ДатаПо date not null,
Остаток integer not null,
primary key (КодТовара, ДатаС)
);

-- ПРИМЕЧАНИЕ: Вставка данных в таблицы (для тестирования полученных результатов)

insert into Курсы (Дата, КодВалюты, Курс) values
('2022-01-01', 1, 50),
('2022-01-01', 2, 80);

insert into Товары (КодТовара, Товар, КодВалюты) values 
(1, 'РД-600', 1),
(2, 'Закрылки', 2),
(3, 'Капсула', 1),
(4, 'Корпус', 2);

insert into Остатки (КодТовара, ДатаС, ДатаПо, Остаток) values 
(1, '2019-01-01', '2022-12-12', 10),
(2, '2019-02-01', '2022-11-12', 4),
(3, '2019-03-01', '2022-11-12', 6),
(3, '2019-04-01', '2022-07-12', 3);

insert into Цены (КодТовара, Дата, Цена) values 
(1, '2019-01-01', 1000),
(2, '2019-02-01', 400),
(3, '2019-03-01', 60),
(4, '2019-04-01', 39);



